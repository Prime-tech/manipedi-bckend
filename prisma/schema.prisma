datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  fullName  String
  phone     String?
  verified  Boolean  @default(false)
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  bookings  Booking[]

  @@map("users")
}

model OTP {
  id        String   @id @default(uuid())
  email     String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Business {
  id            String     @id @default(uuid())
  name          String
  email         String     @unique
  contactPerson String
  phone         String
  zipCode       String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  bookingRequests BookingRequest[]

  @@map("businesses")
}

model Booking {
  id          String    @id @default(uuid())
  userId      String
  serviceType String    // "MANICURE", "PEDICURE", "BOTH"
  dateTime    DateTime
  zipCode     String
  status      String    // "PENDING", "CONFIRMED", "COMPLETED", "CANCELLED"
  selectedRequestId String?  @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  user        User      @relation(fields: [userId], references: [id])
  requests    BookingRequest[]
  selectedRequest BookingRequest? @relation("SelectedRequest", fields: [selectedRequestId], references: [id])

  @@map("bookings")
}

model BookingRequest {
  id          String    @id @default(uuid())
  bookingId   String
  businessId  String
  status      String    // "PENDING", "ACCEPTED", "DECLINED", "CONFIRMED", "REJECTED"
  price       Decimal?
  notes       String?
  userResponse String?  // User's response message (optional)
  confirmedAt DateTime? // When the user confirmed
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  booking     Booking   @relation(fields: [bookingId], references: [id])
  selectedForBooking Booking? @relation("SelectedRequest")
  business    Business  @relation(fields: [businessId], references: [id])

  @@map("booking_requests")
}